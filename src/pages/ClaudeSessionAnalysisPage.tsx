import type React from 'react';
import { useCallback, useEffect, useState } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import { SessionLogEventRenderer } from '../components/sessions/SessionLogEventRenderer';
import type { ClaudeSessionEntry } from '../preload';
import styles from './ClaudeSessionAnalysisPage.module.css';

type ViewMode = 'user-questions' | 'auto-generated';

export const ClaudeSessionAnalysisPage: React.FC = () => {
  const navigate = useNavigate();
  const { projectDirName, sessionId } = useParams<{
    projectDirName: string;
    sessionId: string;
  }>();
  const [projectPath, setProjectPath] = useState<string>('');
  const [viewMode, setViewMode] = useState<ViewMode>('user-questions');
  const [userQuestions, setUserQuestions] = useState<ClaudeSessionEntry[]>([]);
  const [autoGeneratedRequests, setAutoGeneratedRequests] = useState<ClaudeSessionEntry[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Decode projectDirName to get projectPath
  useEffect(() => {
    if (projectDirName) {
      // Convert projectDirName format to path
      // Example: -Users-junwoobang-project-name -> /Users/junwoobang/project-name
      const path = `/${projectDirName.replace(/^-/, '').replace(/-/g, '/')}`;
      setProjectPath(path);
    }
  }, [projectDirName]);

  const loadAnalysisData = useCallback(async () => {
    if (!projectPath || !sessionId) return;

    setLoading(true);
    setError(null);

    try {
      const [questions, autoRequests] = await Promise.all([
        window.claudeSessionsAPI.getUserQuestions(projectPath, sessionId),
        window.claudeSessionsAPI.getAutoGeneratedRequests(projectPath, sessionId),
      ]);

      setUserQuestions(questions);
      setAutoGeneratedRequests(autoRequests);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to load session analysis');
    } finally {
      setLoading(false);
    }
  }, [projectPath, sessionId]);

  useEffect(() => {
    loadAnalysisData();
  }, [loadAnalysisData]);

  const handleClose = () => {
    if (projectDirName) {
      navigate(`/claude-projects/${projectDirName}`);
    }
  };

  const handleBackToSession = () => {
    if (projectDirName && sessionId) {
      navigate(`/claude-projects/${projectDirName}/sessions/${sessionId}`);
    }
  };

  if (!projectPath || !sessionId) {
    return <div>Loading...</div>;
  }

  if (loading) {
    return <div className={styles.loading}>Loading session analysis...</div>;
  }

  if (error) {
    return (
      <div className={styles.error}>
        <div>
          <div>Failed to load session analysis</div>
          <div style={{ fontSize: '11px', marginTop: '8px' }}>{error}</div>
          <button
            type="button"
            onClick={handleClose}
            className={styles.button}
            style={{ marginTop: '12px' }}
          >
            Close
          </button>
        </div>
      </div>
    );
  }

  const currentData = viewMode === 'user-questions' ? userQuestions : autoGeneratedRequests;
  const currentTitle = viewMode === 'user-questions' ? 'User Questions' : 'Auto-Generated Requests';

  return (
    <div className={styles.container}>
      <div className={styles.header}>
        <h3 className={styles.title}>
          Session Analysis
          <span className={styles.sessionId}>{sessionId}</span>
        </h3>

        <div className={styles.metadata}>
          <span className={styles.statBadge}>User Questions: {userQuestions.length}</span>
          <span className={styles.statBadge}>Auto-Generated: {autoGeneratedRequests.length}</span>
          <span className={styles.statBadge}>Project: {projectPath}</span>
        </div>

        <div className={styles.tabs}>
          <button
            type="button"
            className={`${styles.tab} ${viewMode === 'user-questions' ? styles.activeTab : ''}`}
            onClick={() => setViewMode('user-questions')}
          >
            User Questions ({userQuestions.length})
          </button>
          <button
            type="button"
            className={`${styles.tab} ${viewMode === 'auto-generated' ? styles.activeTab : ''}`}
            onClick={() => setViewMode('auto-generated')}
          >
            Auto-Generated Requests ({autoGeneratedRequests.length})
          </button>
        </div>

        <div className={styles.controls}>
          <button type="button" onClick={handleClose} className={styles.button}>
            Close
          </button>
          <button type="button" onClick={handleBackToSession} className={styles.button}>
            Back to Full Session
          </button>
          <button type="button" onClick={loadAnalysisData} className={styles.button}>
            Refresh
          </button>
        </div>
      </div>

      <div className={styles.logContent}>
        {currentData.length === 0 ? (
          <div className={styles.empty}>
            <p>No {currentTitle.toLowerCase()} found in this session</p>
          </div>
        ) : (
          <>
            <div className={styles.sectionTitle}>{currentTitle}</div>
            {currentData.map((entry, idx) => {
              // Create a more stable key using entry properties
              const entryKey = entry.timestamp
                ? `${viewMode}-${entry.timestamp}-${idx}`
                : `${viewMode}-${idx}`;
              return <SessionLogEventRenderer key={entryKey} event={entry} index={idx} />;
            })}
          </>
        )}
      </div>
    </div>
  );
};
